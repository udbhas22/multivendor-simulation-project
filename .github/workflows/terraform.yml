# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

# name: 'Terraform'

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:

# permissions:
#   contents: read

# # .github/workflows/terraform-ci-cd.yml

# # ... (previous parts of your workflow) ...

# jobs:
#   terraform:
#     name: 'Terraform'
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       id-token: write

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.x.x

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Terraform Init
#         id: init
#         run: terraform init # No need for -backend-config here as it's hardcoded in main.tf
#         env:
#           AWS_REGION: us-east-1 # Still good to set region consistently

#       - name: Terraform Format Check
#         id: fmt
#         run: terraform fmt -check
#         continue-on-error: true # Allow subsequent steps to run even if format fails

#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color

#       - name: Terraform Plan
#         id: plan
#         # Only run plan on pull requests OR if explicitly triggered via workflow_dispatch
#         # This provides a preview of changes before merging to main, or for manual checks.
#         if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#         run: terraform plan -no-color -input=false
#         # `-input=false` prevents Terraform from prompting for input variables.

#       - name: Terraform Apply
#         id: apply
#         # Only apply on push to the 'main' branch.
#         # This is the "deployment" step. Use with caution for production environments.
#         if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#         run: terraform apply -auto-approve -input=false
        # `-auto-approve` automatically applies the plan.
        # For production, consider using manual approval via GitHub Environments or separate jobs.

      # Optional: Add a step to destroy resources (e.g., for a 'destroy' branch or manual trigger)
      # - name: Terraform Destroy
      #   if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
      #   run: terraform destroy -auto-approve
      #   env:
      #     AWS_REGION: ${{ env.AWS_REGION }}